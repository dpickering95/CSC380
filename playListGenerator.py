import os
import spotipy.oauth2
import spotipy
import Song2

filenames = next(os.walk('./'))[2]

print('Files in this directory: ')
print(str(filenames))
print('So do not enter one of those.')
print('May I suggest "pl#.py" where # is the next number?')
fileName = input('Please enter the filename you would like to use: ')

print('Now, please paste the spotify song id you would like to construct a class for.')
print('For example: spotify:track:31n9wiTDFnCE3WJNcSRqL9')
songID = input('SongID: ')

thing = Song2.Song2(songID)
songPool = thing.getTopTracks()
probMatrix = thing.compare(songPool)
#probMatrix = 'not the prob matrix, go back and uncomment'

for i in range(len(songPool)):
	songPool[i] = list(songPool[i])

songPoolFormatted = list(songPool)

f = open(fileName, 'w')

f.write('#*****************************************************#\n')
f.write('# Play List 1 (pl1)    **EDIT THIS**                  #\n')
f.write('# Seed Song is {}                                     #\n'.format(songID))
f.write('# "Throwing Stones" by Greatful Dead  **EDIT THIS**   #\n')
f.write('#*****************************************************#\n')
f.write('\n')
f.write('import numpy as np\n')
f.write('\n')
f.write('class {}:\n'.format(fileName[:-3]))
f.write('\n')
f.write('\tdef __init__(self):\n')
f.write('\n')
f.write('\t\tself.songNum = 0 ## start counting from 0\n')
f.write('\n')
f.write('\t\tself.song_pool = {}\n'.format(str(songPoolFormatted)))
f.write('\n')
f.write('\t\tself.prob_matrix = {}\n'.format(str(probMatrix)))
f.write('\n')
f.write('\t\t#self.AVDIFF = self.avDiff()\n')
f.write('\t\tself.track = self.song_pool[self.songNum][0]\n')
f.write('\n')
f.write('\tdef flag_current_song_done(self):\n')
f.write('\t\t#print("flag called, songNum = " + str(self.songNum))\n')
f.write('\t\trow = self.songNum\n')
f.write('\t\tself.song_pool[row][1] = 1\n')
f.write('\n')
f.write('\tdef get_current_track(self):\n')
f.write('\t\t#print(self.track)\n')
f.write('\t\treturn self.track\n')
f.write('\n')
###  Next Track Starts Here ###
f.write('\tdef next_track(self, action):\n')
f.write('\t\tself.flag_current_song_done()\n')
### if finish ###
f.write('\n')
f.write("\t\tif action == 'finish':\n")
f.write('\n')
f.write('\t\t\tcurrentSongNum = self.songNum\n')
f.write('\t\t\trow = self.songNum\n')
f.write('\t\t\tthresh = (self.avDiff(row)/3)\n')
f.write('\n')
f.write('\t\t\tfor i in range(len(self.prob_matrix[row])):\n')
f.write('\t\t\t\tif row == i:\n')
f.write('\t\t\t\t\tcontinue\n')
f.write('\t\t\t\telif self.song_pool[i][1] == 0:\n')
f.write('\t\t\t\t\tif self.prob_matrix[row][i] < thresh:\n')
f.write('\t\t\t\t\t\tself.track = self.song_pool[i][0]\n')
f.write('\t\t\t\t\t\tself.songNum = i\n')
f.write('\t\t\t\t\t\tbreak\n')
f.write('\n')
f.write('\t\t\tif self.songNum == currentSongNum:\n')
f.write('\t\t\t\ttemp = self.prob_matrix[row]\n')
f.write('\t\t\t\ttemp[row] = 100000\n')
f.write('\t\t\t\tself.songNum = np.argmin(temp)\n')
f.write('\n')
### elif like ###
f.write("\t\telif action == 'like':\n")
f.write('\n')
f.write('\t\t\tcurrentSongNum = self.songNum\n')
f.write('\t\t\trow = self.songNum\n')
f.write('\t\t\tthresh = (self.avDiff(row)/4)\n')
f.write('\n')
f.write('\t\t\tfor i in range(len(self.prob_matrix[row])):\n')
f.write('\t\t\t\tif row == i:\n')
f.write('\t\t\t\t\tcontinue\n')
f.write('\t\t\t\telif self.song_pool[i][1] == 0:\n')
f.write('\t\t\t\t\tif self.prob_matrix[row][i] < thresh:\n')
f.write('\t\t\t\t\t\tself.track = self.song_pool[i][0]\n')
f.write('\t\t\t\t\t\tself.songNum = i\n')
f.write('\t\t\t\t\t\tbreak\n')
f.write('\n')
f.write('\t\t\tif self.songNum == currentSongNum:\n')
f.write('\t\t\t\ttemp = self.prob_matrix[row]\n')
f.write('\t\t\t\ttemp[row] = 100000\n')
f.write('\t\t\t\tself.songNum = np.argmin(temp)\n')
f.write('\n')
### elif dislike ###
f.write("\t\telif action == 'dislike':\n")
f.write('\n')
f.write('\t\t\tcurrentSongNum = self.songNum\n')
f.write('\t\t\trow = self.songNum\n')
f.write('\t\t\tthresh1 = (.75*(self.avDiff(row))\n')
f.write('\n')
f.write('\t\t\tfor i in range(len(self.prob_matrix[row])):\n')
f.write('\t\t\t\tif row == i:\n')
f.write('\t\t\t\t\tcontinue\n')
f.write('\t\t\t\telif self.song_pool[i][1] == 0:\n')
f.write('\t\t\t\t\tif self.prob_matrix[row][i] > thresh1:\n')
f.write('\t\t\t\t\t\tself.track = self.song_pool[i][0]\n')
f.write('\t\t\t\t\t\tself.songNum = i\n')
f.write('\t\t\t\t\t\tbreak\n')
f.write('\n')
f.write('\t\t\tif self.songNum == currentSongNum:\n')
f.write('\t\t\t\ttemp = self.prob_matrix[row]\n')
f.write('\t\t\t\ttemp[row] = -100000\n')
f.write('\t\t\t\tself.songNum = np.argmax(temp)\n')
f.write('\n')
### elif skip ###
f.write("\t\telif action == 'skip':\n")
f.write('\n')
f.write('\t\t\tcurrentSongNum = self.songNum\n')
f.write('\t\t\trow = self.songNum\n')
f.write('\t\t\tthresh1 = (self.avDiff(row))\n')
f.write('\n')
f.write('\t\t\tfor i in range(len(self.prob_matrix[row])):\n')
f.write('\t\t\t\tif row == i:\n')
f.write('\t\t\t\t\tcontinue\n')
f.write('\t\t\t\telif self.song_pool[i][1] == 0:\n')
f.write('\t\t\t\t\tif self.prob_matrix[row][i] > thresh1:\n')
f.write('\t\t\t\t\t\tself.track = self.song_pool[i][0]\n')
f.write('\t\t\t\t\t\tself.songNum = i\n')
f.write('\t\t\t\t\t\tbreak\n')
f.write('\n')
f.write('\t\t\tif self.songNum == currentSongNum:\n')
f.write('\t\t\t\ttemp = self.prob_matrix[row]\n')
f.write('\t\t\t\ttemp[row] = -100000\n')
f.write('\t\t\t\tself.songNum = np.argmax(temp)\n')
f.write('\n')
f.write('\tdef avDiff(self, r):\n')
f.write('\t\t## avDiff is NOT the same for all rows\n')
f.write('\t\trow = r\n')
f.write('\t\ttot = 0\n')
f.write('\n')
f.write('\t\tfor i in range(len(self.prob_matrix[row])):\n')
f.write('\t\t\ttot = tot + self.prob_matrix[row][i]\n')
f.write('\t\treturn tot/len(self.prob_matrix)\n')
f.close()

